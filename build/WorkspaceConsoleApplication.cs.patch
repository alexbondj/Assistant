Index: WorkspaceConsoleApplication.cs
===================================================================
--- WorkspaceConsoleApplication.cs	(revision 129401)
+++ WorkspaceConsoleApplication.cs	(working copy)
@@ -3875,6 +3875,14 @@
 			dbStorage.BeforeUpdateDBStructure += OnBeforeUpdateDBStructure;
 			try {
 				dbStorage.PackageInstallOptions = GetPackageInstallOptions(options);
+				var factory = new EditablePackageDeterminerFactory(SystemUserConnection);
+				IEditablePackageDeterminer determiner = factory.GetDeterminer();
+				foreach (Package package in dbStorage.Packages) {
+					if (package.State != PackageStorageObjectState.NotChanged && 
+							!determiner.GetIsPackageEditable(package)) {
+						package.State = PackageStorageObjectState.NotChanged;
+					}
+				}
 				dbStorage.Save(contentProvider);
 			} finally {
 				RemoveInstallEventHandlers(installUtilities);
@@ -4219,13 +4227,14 @@
 
 		private int InstallPackagesFromWorkingCopy(string workingCopyPath) {
 			WorkspaceConsoleOptions workspaceConsoleOptions = CommandLine.GetWorkspaceConsoleOptions();
+			var dbConf = AppConnection.AppSettings.DBConfigurationSectionGroup as DBConfigurationSectionGroup;
+			var csName = dbConf.GeneralSection.ConnectionStringName;
+			var cs = AppConnection.AppSettings.RootConfiguration.ConnectionStrings.ConnectionStrings[csName];
+			WriteInfoMessage(InfoColor, "Db: {0}", cs.ConnectionString);
 			UpdateAndCheckConfigurationVersion(workspaceConsoleOptions);
 			PackageDBStorage dbStorage = CreateDBStorage(Workspace.Id);
-			if (InstallOptions.InstallSystemSchemaDBStructure) {
-				InstallSystemSchemaDBStructure(dbStorage);
-			}
-			string packagesWorkingCopyPath = CreatePackagesWorkingCopyPath(workingCopyPath);
-			RenamePackageSchemaDataFiles(packagesWorkingCopyPath, CommandLine.CultureName);
+			InstallSystemSchemaDBStructure(dbStorage);
+			string packagesWorkingCopyPath = CreateSubstitute(workingCopyPath);
 			var fileStorage = new PackageFileStorage(packagesWorkingCopyPath);
 			fileStorage.Load();
 			if (InstallOptions.Validate && !ValidatePackageStorage(fileStorage, new PackageValidationOptions())) {
@@ -4234,16 +4243,83 @@
 			if (InstallOptions.ValidateSchemaDataColumnParameters && !ValidateSchemaDataColumnParameters(fileStorage)) {
 				return -1;
 			}
-			ComposeAndInstallStorage(fileStorage, dbStorage, packagesWorkingCopyPath);
-			if (InstallOptions.IncludeDependencySources && GetIsClientUnitSchemasHasChanges(dbStorage)) {
-				WriteInfoMessage(ConsoleColor.Gray, GetResource("RegenerateIncludeDependencySourcesStarted"));
-				var clientUnitUtilities = new ClientUnitUtilities(AppConnection);
-				clientUnitUtilities.RegenerateIncludeDependencySources(true);
-				WriteInfoMessage(ConsoleColor.Gray, GetResource("RegenerateIncludeDependencySourcesFinished"));
-			}
+			UpdateWC(packagesWorkingCopyPath, fileStorage, dbStorage);
+			DeleteSubstitute(packagesWorkingCopyPath);
 			return 0;
 		}
 
+		private string CreateSubstitute(string path) {
+			path = NormalizePath(path);
+			WriteInfoMessage(InfoColor, "Creating substitute V: for {0}", path);
+			var result = InvokeProgram("subst", "V:", "\"" + path + "\"");
+			Console.WriteLine(result);
+			if (Directory.Exists("V:")) {
+				return "V:";
+			}
+			return path;
+		}
+
+		private static string NormalizePath(string path) {
+			path = Path.GetFullPath(path.Trim());
+			if (path.EndsWith("\\")) {
+				path = path.Substring(0, path.Length - 1);
+			}
+			return path;
+		}
+
+		private void DeleteSubstitute(string path) {
+			path = NormalizePath(path);
+			var result = InvokeProgram("subst", "/D", "\"" + path + "\"");
+			Console.WriteLine(result);
+			WriteInfoMessage(InfoColor, "Substitute V: deleted");
+		}
+
+		private string InvokeProgram(string programName, params string[] arguments) {
+			var info = new ProcessStartInfo("cmd.exe") {
+				Arguments = $"/C {programName} " + string.Join(" ", arguments),
+				WorkingDirectory = Environment.CurrentDirectory,
+				RedirectStandardOutput = true,
+				RedirectStandardInput = true,
+				CreateNoWindow = true,
+				UseShellExecute = false
+			};
+			System.Diagnostics.Process process = System.Diagnostics.Process.Start(info);
+			process.WaitForExit();
+			string result = process.StandardOutput.ReadToEnd();
+			return result;
+		}
+
+		private void UpdateWC(string workingCopyPath, PackageFileStorage fileStorage, PackageDBStorage dbStorage) {
+			InstallOptions.InstallPackageData = true;
+			InstallOptions.InstallSchemaDBStructure = true;
+			InstallOptions.InstallSqlScripts = true;
+			WriteInfoMessage(ConsoleColor.Gray, new LocalizableString(ResourceManagerName, "StartMessage.Compose"),
+				workingCopyPath, Workspace.Name);
+			PackageStorageComposer.Compose(fileStorage, dbStorage, true);
+			InstallStorage(dbStorage, fileStorage.GetPackageContentProvider(), InstallOptions);
+			WorkspaceUtilities.SetPackageInstallType(SystemUserConnection, Workspace.Id, fileStorage.Packages,
+				SysPackageInstallType.SourceControl);
+		}
+
+		private int GetCurrentPackageRevision(Package package, string wcPath) {
+			if (!wcPath.EndsWith("\\")) {
+				wcPath = wcPath + Path.DirectorySeparatorChar;
+			}
+			var packagePath = Path.Combine(wcPath, package.Name);
+			int result = -1;
+			if (!Directory.Exists(packagePath)) {
+				return result;
+			}
+			var info = InvokeProgram("svn", "info", "\""+packagePath+ "\"");
+			var revisionRegex = new Regex("Revision: (\\d*)");
+			var match = revisionRegex.Match(info);
+			if (match.Success){
+				var revStr = match.Groups[1].Value;
+				int.TryParse(revStr, out result);
+			}
+			return result;
+		}
+
 		private bool GetIsClientUnitSchemasHasChanges(PackageStorage storage) {
 			IEnumerable<Package> changedPackages = storage.Packages.Where(package =>
 				package.State != PackageStorageObjectState.NotChanged);
